@{
    ViewData["Title"] = "Performance Test";
}

<div class="container mt-4">
    <h2>Async vs Sync Performance Test</h2>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Synchronous Test</h5>
                    <p>Time taken: <span id="syncTime">0</span> ms</p>
                    <button class="btn btn-primary" onclick="runTest('sync')">Run Sync Test</button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Asynchronous Test</h5>
                    <p>Time taken: <span id="asyncTime">0</span> ms</p>
                    <button class="btn btn-primary" onclick="runTest('async')">Run Async Test</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Visualization</h5>
                    <canvas id="timelineCanvas" width="800" height="400"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const canvas = document.getElementById('timelineCanvas');
        const ctx = canvas.getContext('2d');

        function drawTimeline(results) {

            // Init            
            const maxEndTime = 4000
            const maxEndTimeTicks = maxEndTime * 10000;
            const padding = 40;
            const offsetX = 100;
            const barHeight = 20;
            const spacing = 10;
            const timeScale = (canvas.width - padding * 2 - offsetX) / maxEndTimeTicks;

            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw time axis
            ctx.beginPath();
            ctx.moveTo(padding + offsetX, canvas.height - padding);
            ctx.lineTo(canvas.width - padding, canvas.height - padding);
            ctx.stroke();

            // Draw time markers
            const timeMarkers = 8;
            for (let i = 0; i <= timeMarkers; i++) {
                const x = padding + offsetX + (canvas.width - padding * 2 - offsetX) * (i / timeMarkers);
                const timeValue = (maxEndTime * i) / timeMarkers;

                ctx.beginPath();
                ctx.moveTo(x, canvas.height - padding - 5);
                ctx.lineTo(x, canvas.height - padding + 5);
                ctx.stroke();

                ctx.fillStyle = '#000';
                ctx.textAlign = 'center';
                ctx.fillText(timeValue + 'ms', x, canvas.height - padding + 20);
            }

            // Draw request bars
            results.forEach((result, index) => {
                const y = padding + index * (barHeight + spacing);
                const startX = padding + offsetX + result.startTime * timeScale;
                const endX = padding + offsetX + result.endTime * timeScale;

                // Draw bar
                ctx.fillStyle = '#007bff';
                ctx.fillRect(startX, y, endX - startX, barHeight);

                // Draw label
                ctx.fillStyle = '#000';
                ctx.textAlign = 'right';
                ctx.fillText(`Request ${result.id}`, padding + offsetX - 10, y + barHeight / 2 + 5);

                // Draw thread ID
                ctx.textAlign = 'left';
                ctx.fillText(`Thread ${result.startThreadId} â†’ ${result.endThreadId}`, endX + 10, y + barHeight / 2 + 5);
            });
        }

        async function runTest(type) {
            if (type !== 'sync' && type !== 'async') {
                throw new Error('Type must be either "sync" or "async"');
            }
            const requests = [];

            for (let i = 0; i < 10; i++) {
                const action = type === 'sync' ? 'SlowOperation' : 'SlowOperation2';
                requests.push(fetch(`/Performance/${action}?id=${i + 1}`));
            }

            const startTime = performance.now();
            const responses = await Promise.all(requests);
            const results = await Promise.all(responses.map(r => r.json()));
            const endTime = performance.now();

            document.getElementById(type + 'Time').textContent = Math.round(endTime - startTime);

            const minStartTime = Math.min(...results.map(r => r.startTime));

            const adjustedResults = results.map(r => ({
                ...r,
                startTime: r.startTime - minStartTime,
                endTime: r.endTime - minStartTime
            }));

            console.log(adjustedResults);

            drawTimeline(adjustedResults);
        }
    </script>
}