@{
    ViewData["Title"] = "Performance Test";
}

<div class="container mt-4">
    <h2>Async vs Sync Performance Test</h2>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Synchronous Test</h5>
                    <p>Time taken: <span id="syncTime">0</span> ms</p>
                    <button class="btn btn-primary" onclick="runTest('sync')">Run Sync Test</button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Asynchronous Test</h5>
                    <p>Time taken: <span id="asyncTime">0</span> ms</p>
                    <button class="btn btn-primary" onclick="runTest('async')">Run Async Test</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        async function runTest(type) {
            if (type !== 'sync' && type !== 'async') {
                throw new Error('Type must be either "sync" or "async"');
            }
            const requests = [];

            for (let i = 0; i < 10; i++) {
                const action = type === 'sync' ? 'SlowOperation' : 'SlowOperation2';
                requests.push(fetch(`/Performance/${action}?id=${i + 1}`));
            }

            await Promise.all(requests);

            const responses = await Promise.all(requests);
            const results = await Promise.all(responses.map(r => r.json()));
            
            const minStartTime = Math.min(...results.map(r => r.startTime));

            const adjustedResults = results.map(r => ({
                ...r,
                startTime: r.startTime - minStartTime,
                endTime: r.endTime - minStartTime
            }));

            console.log(adjustedResults);
        }


    </script>
}