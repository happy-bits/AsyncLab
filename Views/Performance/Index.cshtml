@{
    ViewData["Title"] = "Performance Test";
}

<div class="container mt-4">
    <h2>Async vs Sync Performance Test</h2>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Synchronous Test</h5>
                    <p>Time taken: <span id="syncTime">0</span> ms</p>
                    <button class="btn btn-primary" onclick="runSyncTest()">Run Sync Test</button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Asynchronous Test</h5>
                    <p>Time taken: <span id="asyncTime">0</span> ms</p>
                    <button class="btn btn-primary" onclick="runAsyncTest()">Run Async Test</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        async function runSyncTest() {
            const startTime = performance.now();
            console.log('Starting sync test at:', new Date().toISOString());
            const requests = [];

            for (let i = 0; i < 20; i++) {
                console.log(`Initiating async request ${i + 1}`);
                requests.push(fetch(`/Performance/SlowOperation?id=${i + 1}`));
            }

            console.log('Waiting for all requests to complete...');
            await Promise.all(requests);
            
            const endTime = performance.now();
            document.getElementById('syncTime').textContent = Math.round(endTime - startTime);
        }

        async function runAsyncTest() {
            const startTime = performance.now();
            console.log('Starting async test at:', new Date().toISOString());
            const requests = [];

            for (let i = 0; i < 20; i++) {
                console.log(`Initiating async request ${i + 1}`);
                requests.push(fetch(`/Performance/SlowOperation2?id=${i + 1}`));
            }

            console.log('Waiting for all requests to complete...');
            await Promise.all(requests);
            
            const endTime = performance.now();
            document.getElementById('asyncTime').textContent = Math.round(endTime - startTime);
        }
    </script>
}